{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hello • All posts by \"树 二叉树\" tag",
    "description": "",
    "home_page_url": "https://liukplus.github.io.com",
    "items": [
        {
            "id": "https://liukplus.github.io.com/2021/10/18/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/",
            "url": "https://liukplus.github.io.com/2021/10/18/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/",
            "title": "二叉树遍历",
            "date_published": "2021-10-17T16:30:32.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"二叉树遍历大礼包\"><a class=\"markdownIt-Anchor\" href=\"#二叉树遍历大礼包\">#</a> 二叉树遍历大礼包</h1>\n<h2 id=\"二叉树节点\"><a class=\"markdownIt-Anchor\" href=\"#二叉树节点\">#</a> 二叉树节点</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//节点存储的数据以int为例</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    TreeNode left;</span><br><span class=\"line\">    TreeNode right;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val=val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val,TreeNode left,TreeNode right)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val=val;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.left=left;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.right=right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"递归版前-中-后序遍历\"><a class=\"markdownIt-Anchor\" href=\"#递归版前-中-后序遍历\">#</a> 递归版前、中、后序遍历</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrderTraversal</span><span class=\"params\">(TreeNode root)</span></span>&#123;<span class=\"comment\">//前序遍历二叉树</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.print(root.val);<span class=\"comment\">//对这个节点的数据可以是任意操作（仅仅以输出为例）</span></span><br><span class=\"line\">    preOrderTraversal(root.left);</span><br><span class=\"line\">    preOrderTraversal(root.right);</span><br><span class=\"line\">    <span class=\"comment\">//遍历顺序</span></span><br><span class=\"line\">    <span class=\"comment\">//前序遍历（根--&gt;左--&gt;右）</span></span><br><span class=\"line\">    <span class=\"comment\">//中序遍历（左--&gt;根--&gt;右）</span></span><br><span class=\"line\">    <span class=\"comment\">//后序遍历（左--&gt;右--&gt;根）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>递归中序后序遍历就省略不写了，把对节点数据的操作的代码位置按照遍历顺序改变一下就可以了</p>\n<h2 id=\"非递归版前-中-后序遍历\"><a class=\"markdownIt-Anchor\" href=\"#非递归版前-中-后序遍历\">#</a> 非递归版前、中、后序遍历</h2>\n<p><a href=\"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/\">leetcode 前序遍历</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">nonrecursivePre</span><span class=\"params\">(TreeNode root)</span></span>&#123;<span class=\"comment\">//非递归前序</span></span><br><span class=\"line\">    Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(root!=<span class=\"keyword\">null</span> || !stack.isEmpty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(root!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.print(root.val);</span><br><span class=\"line\">            stack.push(root);</span><br><span class=\"line\">            root=root.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        root=stack.pop();<span class=\"comment\">//(1)</span></span><br><span class=\"line\">        root=root.right;<span class=\"comment\">//(2)</span></span><br><span class=\"line\">        <span class=\"comment\">//(1)(2)可合二为一:root=stack.pop().right;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode-cn.com/problems/binary-tree-preorder-traversal/\">leetcode 中序遍历</a><br>\n<a href=\"https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/\"> leetcode 二叉搜索树中第 K 小的元素</a><br>\n<a href=\"https://leetcode-cn.com/problems/validate-binary-search-tree/\">验证二叉搜索树</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">nonRecursiveIn</span><span class=\"params\">(TreeNode root)</span></span>&#123;<span class=\"comment\">//非递归中序</span></span><br><span class=\"line\">    Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(root!=<span class=\"keyword\">null</span> || !stack.isEmpty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(root!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            stack.push(root);</span><br><span class=\"line\">            root=root.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        root=stack.pop();</span><br><span class=\"line\">        System.out.print(root.val);</span><br><span class=\"line\">        root=root.right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode-cn.com/problems/binary-tree-postorder-traversal/\">leetcode 后序遍历</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">nonRecursivePost</span><span class=\"params\">(TreeNode root)</span></span>&#123;<span class=\"comment\">//非递归后序</span></span><br><span class=\"line\">    Stack&lt;TreeNode&gt; stack = <span class=\"keyword\">new</span> Stack();</span><br><span class=\"line\">    TreeNode pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(root!=<span class=\"keyword\">null</span> || !stack.isEmpty())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(root!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            stack.push(root);</span><br><span class=\"line\">            root=root.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        root=stack.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root.right==<span class=\"keyword\">null</span> || pre==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.print(root.val);</span><br><span class=\"line\">            pre=root;</span><br><span class=\"line\">            root=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            stack.push(root);</span><br><span class=\"line\">            root=root.right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他遍历\"><a class=\"markdownIt-Anchor\" href=\"#其他遍历\">#</a> 其他遍历</h2>\n<p><a href=\"https://leetcode-cn.com/problems/binary-tree-level-order-traversal/\">leetcode 层级遍历</a><br>\n<a href=\"https://leetcode-cn.com/problems/binary-tree-right-side-view/\"> leetcode 右视图</a><br>\n<a href=\"https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/\"> leetcode 锯齿形层序遍历</a><br>\n<a href=\"https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/\"> leetcode 填充每个节点的下一个右侧节点指针</a><br>\n<a href=\"https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node-ii/\"> leetcode 填充每个节点的下一个右侧节点指针 II</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">levelTraversal</span><span class=\"params\">(TreeNode root)</span></span>&#123;<span class=\"comment\">//层序遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Queue&lt;Integer&gt; nodes = <span class=\"keyword\">new</span> LinkedList();</span><br><span class=\"line\">    nodes.offer(root);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!nodes.isEmpty())&#123;</span><br><span class=\"line\">        TreeNode node = nodes.poll();</span><br><span class=\"line\">        System.out.print(node.val);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node.left=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            nodes.offer(root.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node.right!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            nodes.offer(root.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode-cn.com/problems/vertical-order-traversal-of-a-binary-tree/\">leetcode 垂序遍历</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; verticalTraversal(TreeNode root)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//updating...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\"><label for=\"cbx_0\"> BinaryTree</label></li>\n</ul>\n",
            "tags": [
                "树 二叉树"
            ]
        }
    ]
}