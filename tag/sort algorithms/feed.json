{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hello • All posts by \"sort algorithms\" tag",
    "description": "",
    "home_page_url": "https://liukplus.github.io.com",
    "items": [
        {
            "id": "https://liukplus.github.io.com/2021/10/15/Sort/",
            "url": "https://liukplus.github.io.com/2021/10/15/Sort/",
            "title": "Sort",
            "date_published": "2021-10-14T16:08:47.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"排序算法\"><a class=\"markdownIt-Anchor\" href=\"#排序算法\">#</a> 排序算法</h1>\n<h1 id=\"1快速排序\"><a class=\"markdownIt-Anchor\" href=\"#1快速排序\">#</a> 1. 快速排序</h1>\n<p><code>思想：每次从数组中要排序的部分中选择一个元素，将小于等于它的元素放在它的左边，将大于等于它的元素放在它的右边，这样我们就找到了该元素在数组排好序后的正确位置，并且数组被切分成两半，该元素的左边和该元素的右边，再对右边部分地柜调用刚才的步骤，右边部分有序了，左边部分同样也递归调用，左边部分有序了，整个数组也就有序了。</code></p>\n<p><code>方法：</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 切分数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a,<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> less=left,more=right+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v=a[left];<span class=\"comment\">//选取最左边的元素作为这一次要排序的数</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(a[++less]&lt;v)&#123;<span class=\"comment\">//找到左边大于v的数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(less&gt;=right)&#123;<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(a[--more]&gt;v)&#123;<span class=\"comment\">//找到右边小于v的数</span></span><br><span class=\"line\">            <span class=\"comment\">// if(more&lt;less)&#123;break;&#125;这里可有可无，因为v等于a[left]，more不可能越界</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(less&gt;=more)&#123;<span class=\"keyword\">break</span>;&#125;<span class=\"comment\">//左指针&gt;=右指针，表示已经遍历完了</span></span><br><span class=\"line\">        exch(a,less,more);<span class=\"comment\">//将左边大于v的数与右边小于</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    exch(a,more,left);<span class=\"comment\">//将选取的数放在排序后的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> more;<span class=\"comment\">//返回切分点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 递归调用的排序方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a,<span class=\"keyword\">int</span> lo,<span class=\"keyword\">int</span> hi)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lo&gt;=hi)&#123;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> partitionPoint=partition(a,lo,hi);<span class=\"comment\">//将数组切分</span></span><br><span class=\"line\">    quickSort(a,lo,partitionPoint-<span class=\"number\">1</span>);<span class=\"comment\">//递归调用将数组左边排序</span></span><br><span class=\"line\">    quickSort(a,partitionPoint+<span class=\"number\">1</span>,hi);<span class=\"comment\">//递归调用将数组右边排序</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 交换</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp=a[i];</span><br><span class=\"line\">    a[i]=a[j];</span><br><span class=\"line\">    a[j]=temp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">||</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">    a[i]^=a[j];</span><br><span class=\"line\">    a[j]^=a[i];</span><br><span class=\"line\">    a[i]^=a[j];</span><br><span class=\"line\">&#125;(</span><br></pre></td></tr></table></figure>\n<h1 id=\"2归并排序\"><a class=\"markdownIt-Anchor\" href=\"#2归并排序\">#</a> 2. 归并排序</h1>\n<p><code>思想：将要排序的数组a二分为两个数组a1,a2，分别对这两个数组排序,通过递归调用将a1,a2排好序后，再将a1,a2归并，对a1,a2这两个数组排序是也采用相同的办法，二分再归并，实际上排序是通过归并来完成的，无限二分直到lo==hi，即子数组只有一个数（肯定有序），再将各个子数组合并，这样数组就有序了。</code> <br>\n <code>方法：</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 归并</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a,<span class=\"keyword\">int</span> lo,<span class=\"keyword\">int</span> mid,<span class=\"keyword\">int</span> hi)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] aux=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[hi-lo+<span class=\"number\">1</span>];<span class=\"comment\">//建立辅助数组存储归并后的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> index=<span class=\"number\">0</span>,index1=lo,index2mid+<span class=\"number\">1</span>;<span class=\"comment\">//双指针index1指向数组左边部分的起始位置，index2指向数组右边部分的起始位置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(index1&lt;=mid &amp;&amp; index2&lt;=hi)&#123;</span><br><span class=\"line\">        aux[index++]=a[index1]&gt;a[index2]?a[index1++]:a[index2++];<span class=\"comment\">//比较左指针和右指针指向的元素，将较大的元素赋值给辅助数组对应下标，指向该较大元素的指针右移</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(index1&lt;=mid)&#123;<span class=\"comment\">//左边部分归并剩下部分依次添加到辅助数组（1）</span></span><br><span class=\"line\">        aux[index++]=a[index1++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(index2&lt;=mid)&#123;<span class=\"comment\">//右边部分归并剩下部分依次添加到辅助数组（2）</span></span><br><span class=\"line\">        aux[index++]=a[index2++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//（1）与（2）只会执行一个</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;hi-lo+<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        a[i+lo]=aux[i];<span class=\"comment\">//将辅助数组拷贝到原数组</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a,<span class=\"keyword\">int</span> lo,<span class=\"keyword\">int</span> hi)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lo&gt;=hi)&#123;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=lo+(hi-lo)&gt;&gt;<span class=\"number\">1</span>;<span class=\"comment\">//二分数组</span></span><br><span class=\"line\">    mergeSort(a,lo,mid);<span class=\"comment\">//递归调用，将左边排序</span></span><br><span class=\"line\">    mergeSort(a,mid+<span class=\"number\">1</span>,hi);<span class=\"comment\">//将右边排序</span></span><br><span class=\"line\">    merge(a,lo,mid,hi);<span class=\"comment\">//归并左右边</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3堆排序\"><a class=\"markdownIt-Anchor\" href=\"#3堆排序\">#</a> 3. 堆排序</h1>\n<p><code>思想：通过建立二叉堆数据结构（完全二叉树），我么可以用数组的下标来对应二叉树的层级结构，在使用数组的第一个位置的情况下，对二叉树任意节点都有以下关系：某个左子节点下标=2*该节点下标+1，我们要实现这样的堆，它每个节点的值（即数组对应的元素）不小于它的子节点的值，这就是堆有序，从任意节点向上，我们都能得到非递减的元素，从任意节点向下，我们都能得到非递增的元素，对要排序的数组实现堆有序的结构，每次从堆中取出根节点（也就是最大元素），再将堆恢复为有序，具体步骤是交换根节点和最后一个节点，然后断开最后一个节点与堆的连接，通过下沉根节点将堆恢复为有序。所以我们每次从堆中取出的元素都是堆中最大的元素，这样数组中所有的元素就排好序了。</code> <br>\n <code>方法：</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下沉</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sink</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a,<span class=\"keyword\">int</span> sinkPoint,<span class=\"keyword\">int</span> heapsize)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">2</span>*sinkPoint+<span class=\"number\">1</span>&lt;heapsize)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left=<span class=\"number\">2</span>*sinkPoint+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> larger = left+<span class=\"number\">1</span>&lt;heapsize &amp;&amp; a[left+<span class=\"number\">1</span>]&gt;a[left]?left+<span class=\"number\">1</span>:left;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[sinkPoint]&lt;a[larger])&#123;</span><br><span class=\"line\">            exch(a,sinkPoint,larger);</span><br><span class=\"line\">            sinkPoint=larger;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;<span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 上浮</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swim</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a,<span class=\"keyword\">int</span> swimPoint)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(swimPoint&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[swimPoint]&gt;a[(swimPoint-<span class=\"number\">1</span>)/<span class=\"number\">2</span>])&#123;</span><br><span class=\"line\">                exch(a,swimPoint,(swimPoint-<span class=\"number\">1</span>)/<span class=\"number\">2</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = a.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">        swim(a,i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> heapsize=len;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">        exch(a,--heapsize,<span class=\"number\">0</span>);</span><br><span class=\"line\">        sink(a,<span class=\"number\">0</span>,heapsize);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">||</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = a.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=(len-<span class=\"number\">1</span>)/<span class=\"number\">2</span>;i&gt;=<span class=\"number\">0</span>;i--) &#123;</span><br><span class=\"line\">        sink(a, i, len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> heapsize = len;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">        swap(a, <span class=\"number\">0</span>, --heapsize);</span><br><span class=\"line\">        sink(a, <span class=\"number\">0</span>, heapsize);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len=a.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=(len-<span class=\"number\">1</span>)/<span class=\"number\">2</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        sink(a,i,len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n    <div id=\"aplayer-vKRpYYkz\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"4999290430\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"false\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\"\n    ></div>\n",
            "tags": [
                "Sort algorithms"
            ]
        }
    ]
}